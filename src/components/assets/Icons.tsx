import { CSS_VARS, CSS_VARS_OPTIONS } from '../../utils/cssVars'

type IconProps = {
  width?: number
  onClick?: (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => void
  color?: CSS_VARS_OPTIONS
}
type IconToggle = {
  toggle?: boolean
}

export const EditIcon: React.FC<IconProps> = ({ width, onClick, color }) => (
  <svg
    xmlns='http://www.w3.org/2000/svg'
    x='0px'
    y='0px'
    width={width || '24'}
    height={width || '24'}
    viewBox='0 0 24 24'
    onClick={onClick}
    style={{ cursor: onClick ? 'pointer' : 'unset' }}
  >
    <path
      fill={color ? CSS_VARS[color] : '#DFDFDF'}
      d='M 18 2 L 15.585938 4.4140625 L 19.585938 8.4140625 L 22 6 L 18 2 z M 14.076172 5.9238281 L 3 17 L 3 21 L 7 21 L 18.076172 9.9238281 L 14.076172 5.9238281 z'
    ></path>
  </svg>
)

export const AngleUpIcon: React.FC<IconProps & IconToggle> = ({
  width,
  onClick,
  toggle,
  color,
}) => {
  return (
    <svg
      width={width || '24'}
      height={width || '24'}
      viewBox='0 0 24 24'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'
      style={{
        transition: 'transform 0.3s var(--BEZIER)',
        transform: toggle ? 'rotate(180deg)' : 'rotate(0deg)',
        cursor: onClick ? 'pointer' : 'unset',
      }}
      onClick={onClick}
    >
      <path
        d='M4.93887 16.1463C5.07817 16.2856 5.24358 16.3962 5.42563 16.4717C5.60768 16.5471 5.80281 16.5859 5.99987 16.5859C6.19694 16.5859 6.39207 16.5471 6.57412 16.4717C6.75617 16.3962 6.92157 16.2856 7.06087 16.1463L11.6469 11.5613C11.7406 11.4675 11.8678 11.4149 12.0004 11.4149C12.133 11.4149 12.2601 11.4675 12.3539 11.5613L16.9389 16.1463C17.2201 16.4277 17.6017 16.5858 17.9995 16.5859C18.3974 16.586 18.779 16.428 19.0604 16.1468C19.3418 15.8655 19.4999 15.484 19.5 15.0861C19.5001 14.6883 19.3421 14.3067 19.0609 14.0253L14.4749 9.43926C14.1499 9.11421 13.764 8.85637 13.3393 8.68046C12.9147 8.50455 12.4595 8.414 11.9999 8.414C11.5402 8.414 11.0851 8.50455 10.6604 8.68046C10.2357 8.85637 9.84988 9.11421 9.52487 9.43926L4.93887 14.0253C4.65767 14.3065 4.49969 14.688 4.49969 15.0858C4.49969 15.4835 4.65767 15.865 4.93887 16.1463Z'
        fill={color ? CSS_VARS[color] : '#DFDFDF'}
        fillOpacity='0.6'
      />
    </svg>
  )
}

export const CrossIcon: React.FC<IconProps> = ({ width, onClick, color }) => (
  <svg
    width={width}
    height={width}
    viewBox='0 0 24 24'
    fill='none'
    xmlns='http://www.w3.org/2000/svg'
    onClick={onClick}
    style={{ cursor: onClick ? 'pointer' : 'unset' }}
  >
    <path
      d='M14.1208 11.9998L17.9998 8.11682C18.2517 7.83058 18.3851 7.45918 18.3729 7.07811C18.3607 6.69705 18.2039 6.33491 17.9343 6.06532C17.6647 5.79573 17.3026 5.63891 16.9215 5.62674C16.5405 5.61458 16.1691 5.74797 15.8828 5.99982L11.9998 9.87882L8.10983 5.98782C7.9705 5.84849 7.80509 5.73796 7.62304 5.66256C7.441 5.58715 7.24588 5.54834 7.04883 5.54834C6.85179 5.54834 6.65667 5.58715 6.47462 5.66256C6.29258 5.73796 6.12717 5.84849 5.98783 5.98782C5.8485 6.12715 5.73798 6.29256 5.66257 6.47461C5.58716 6.65666 5.54835 6.85177 5.54835 7.04882C5.54835 7.24587 5.58716 7.44098 5.66257 7.62303C5.73798 7.80508 5.8485 7.97049 5.98783 8.10982L9.87883 11.9998L5.99983 15.8818C5.84771 16.0178 5.72492 16.1834 5.639 16.3685C5.55307 16.5536 5.50581 16.7542 5.5001 16.9582C5.49439 17.1621 5.53036 17.3651 5.6058 17.5547C5.68124 17.7443 5.79457 17.9165 5.93885 18.0608C6.08314 18.2051 6.25534 18.3184 6.44493 18.3939C6.63452 18.4693 6.83751 18.5053 7.04147 18.4996C7.24544 18.4938 7.4461 18.4466 7.63118 18.3607C7.81625 18.2747 7.98184 18.1519 8.11783 17.9998L11.9998 14.1208L15.8778 17.9998C16.1592 18.2812 16.5409 18.4393 16.9388 18.4393C17.3368 18.4393 17.7184 18.2812 17.9998 17.9998C18.2812 17.7184 18.4393 17.3368 18.4393 16.9388C18.4393 16.5409 18.2812 16.1592 17.9998 15.8778L14.1208 11.9998Z'
      fill={color ? CSS_VARS[color] : '#DFDFDF'}
    />
  </svg>
)

type EyeIconProps = {
  showPassword: boolean
  setShowPassword: React.Dispatch<React.SetStateAction<boolean>>
}
export const EyeIcon: React.FC<EyeIconProps> = ({ showPassword, setShowPassword }) => {
  return (
    <div
      style={{
        position: 'absolute',
        right: '10px',
        top: '15px',
        cursor: 'pointer',
        userSelect: 'none',
      }}
      onClick={() => setShowPassword(!showPassword)}
    >
      {showPassword ? (
        <svg
          width='20px'
          height='20px'
          viewBox='0 0 24 24'
          fill='none'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            opacity='0.1'
            fillRule='evenodd'
            clipRule='evenodd'
            d='M16.8494 7.05025C14.1158 4.31658 9.6836 4.31658 6.94993 7.05025L4.82861 9.17157C3.49528 10.5049 2.82861 11.1716 2.82861 12C2.82861 12.8284 3.49528 13.4951 4.82861 14.8284L6.94993 16.9497C9.6836 19.6834 14.1158 19.6834 16.8494 16.9497L18.9707 14.8284C20.3041 13.4951 20.9707 12.8284 20.9707 12C20.9707 11.1716 20.3041 10.5049 18.9707 9.17157L16.8494 7.05025ZM12.0002 8.75C10.2053 8.75 8.75019 10.2051 8.75019 12C8.75019 13.7949 10.2053 15.25 12.0002 15.25C13.7951 15.25 15.2502 13.7949 15.2502 12C15.2502 10.2051 13.7951 8.75 12.0002 8.75Z'
            fill='#DFDFDF'
          />
          <path
            d='M15 12C15 13.6569 13.6569 15 12 15C10.3431 15 9 13.6569 9 12C9 10.3431 10.3431 9 12 9C13.6569 9 15 10.3431 15 12Z'
            stroke='#DFDFDF'
            strokeWidth='2'
          />
          <path
            d='M6.94975 7.05025C9.68342 4.31658 14.1156 4.31658 16.8492 7.05025L18.9706 9.17157C20.3039 10.5049 20.9706 11.1716 20.9706 12C20.9706 12.8284 20.3039 13.4951 18.9706 14.8284L16.8492 16.9497C14.1156 19.6834 9.68342 19.6834 6.94975 16.9497L4.82843 14.8284C3.49509 13.4951 2.82843 12.8284 2.82843 12C2.82843 11.1716 3.49509 10.5049 4.82843 9.17157L6.94975 7.05025Z'
            stroke='#DFDFDF'
            strokeWidth='2'
            strokeLinejoin='round'
          />
        </svg>
      ) : (
        <svg
          width='20px'
          height='20px'
          viewBox='0 0 24 24'
          fill='none'
          xmlns='http://www.w3.org/2000/svg'
        >
          <path
            opacity='0.1'
            d='M6.29528 7.87634L5 9.17162C3.66667 10.505 3 11.1716 3 12C3 12.8285 3.66667 13.4951 5 14.8285L7.12132 16.9498C9.85499 19.6835 14.2871 19.6835 17.0208 16.9498L17.4322 16.5384L14.5053 14.2619C13.9146 14.8713 13.0873 15.2501 12.1716 15.2501C10.3766 15.2501 8.92157 13.795 8.92157 12.0001C8.92157 11.3746 9.09827 10.7904 9.40447 10.2946L6.29528 7.87634Z'
            fill='#DFDFDF'
          />
          <path
            d='M3.17139 5.12988L21.1714 19.1299'
            stroke='#DFDFDF'
            strokeWidth='2'
            strokeLinecap='round'
            strokeLinejoin='round'
          />
          <path
            d='M14.3653 13.8456C13.8162 14.5483 12.9609 15 12 15C10.3431 15 9 13.6569 9 12C9 11.3256 9.22253 10.7032 9.59817 10.2021'
            stroke='#DFDFDF'
            strokeWidth='2'
          />
          <path
            d='M9 5.62667C11.5803 4.45322 14.7268 4.92775 16.8493 7.05025L19.8511 10.052C20.3477 10.5486 20.5959 10.7969 20.7362 11.0605C21.0487 11.6479 21.0487 12.3521 20.7362 12.9395C20.5959 13.2031 20.3477 13.4514 19.8511 13.948V13.948L19.799 14'
            stroke='#DFDFDF'
            strokeWidth='2'
            strokeLinecap='round'
            strokeLinejoin='round'
          />
          <path
            d='M7.01596 8.39827C7.40649 8.00774 7.40649 7.37458 7.01596 6.98406C6.62544 6.59353 5.99228 6.59353 5.60175 6.98406L7.01596 8.39827ZM7.65685 16.2427L5.53553 14.1213L4.12132 15.5356L6.24264 17.6569L7.65685 16.2427ZM16.1421 16.2427C13.799 18.5858 10 18.5858 7.65685 16.2427L6.24264 17.6569C9.36684 20.7811 14.4322 20.7811 17.5563 17.6569L16.1421 16.2427ZM5.53553 9.8787L7.01596 8.39827L5.60175 6.98406L4.12132 8.46449L5.53553 9.8787ZM16.7465 15.6383L16.1421 16.2427L17.5563 17.6569L18.1607 17.0526L16.7465 15.6383ZM5.53553 14.1213C4.84888 13.4347 4.40652 12.9893 4.12345 12.6183C3.85798 12.2704 3.82843 12.1077 3.82843 12H1.82843C1.82843 12.7208 2.1322 13.3056 2.53341 13.8315C2.917 14.3342 3.47464 14.8889 4.12132 15.5356L5.53553 14.1213ZM4.12132 8.46449C3.47464 9.11116 2.917 9.6658 2.53341 10.1686C2.1322 10.6944 1.82843 11.2792 1.82843 12H3.82843C3.82843 11.8924 3.85798 11.7297 4.12345 11.3817C4.40652 11.0107 4.84888 10.5654 5.53553 9.8787L4.12132 8.46449Z'
            fill='#DFDFDF'
          />
        </svg>
      )}
    </div>
  )
}
